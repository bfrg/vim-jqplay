*jqplay.txt*  Run jq (the command-line JSON processor) interactively in Vim

Author:     bfrg <http://github.com/bfrg>
Website:    https://github.com/bfrg/vim-jqplay
License:    Same terms as Vim itself (see |license|)


==============================================================================
INTRODUCTION                                           *jqplay* *jqplay-intro*

Run jq <https://github.com/stedolan/jq> on a json buffer, and interactively
update the output window whenever the input buffer or the jq filter buffer are
modified, similar to https://jqplay.org.

==============================================================================
USAGE                                                           *jqplay-usage*

Commands ~

:Jqplay [{args}]                                              *jqplay-:Jqplay*
            Open a new jq scratch buffer and apply the entered jq filter to
            the current buffer. The output is displayed in a new |:split|
            window, and updated interactively when both the filter buffer or
            the input buffer are modified.

            {args} can be any jq command-line arguments as you would write
            them in the shell, except for the "-f" or "--from-file" options.
            Jq is always invoked with the options specified in {args}. These
            can be changed at any time through |jqplay-:Jqrun| (see below).

            The name of the output buffer is prefixed with "jq-output://" to
            distinguish it from the input buffer.

            The command can be preceded by a command modifier. For example, to
            open the output buffer in a new |:vertical| split, run: >
                :vertical Jqplay {args}
<
            Possible modifiers:
                |:vertical|
                |:topleft|
                |:botright|
                |:leftabove|  (same as |:aboveleft|)
                |:rightbelow| (same as |:belowright|)

            By default jq is invoked automatically when the |InsertLeave| or
            the |TextChanged| event is triggered. The list of autocommands can
            be changed with the "autocmds" option, see |jqplay-autocmds|
            below.

:JqplayClose[!]                                          *jqplay-:JqplayClose*
            Close the interactive jqplay session. This will delete all
            autocommands that are invoking jq on buffer change.

            Without the [!] all buffers are kept open. Adding [!] will also
            |:bdelete| the jq filter and output buffers. If the input buffer
            is a scratch buffer ('buftype' is "nofile") it will be deleted as
            well. Think of ":JqplayClose!" as "I am done, close everything".

:Jqrun[!] [{args}]                                             *jqplay-:Jqrun*
            Invoke jq manually with the jq command-line arguments {args}. This
            will temporarily override the jq options previously set with
            ":Jqplay {args}". Adding a [!] will permanently set the jq options
            of the current jq scratch buffer to {args}.

            This command is useful to quickly run the same jq filter with
            different set of jq arguments.

            Alternatively, if you don't like to run jq interactively on every
            buffer change, disable all |jqplay-autocmds| and run ":Jqrun" on
            demand.

            This command is available only after running |jqplay-:Jqplay|, and
            is deleted after the jqplay session is closed.

:Jqstop [{how}]                                               *jqplay-:Jqstop*
            Stop any running jq process that was previously started with
            |jqplay-:Jqplay| or |jqplay-:Jqrun|. When {how} is omitted, the
            job will be terminated. See |job_stop()| for more details on the
            {how} values.

:JqplayScratch [{args}]                                *jqplay-:JqplayScratch*
            Start an interactive session in a new |tab| page. This command
            will open a new scratch buffer as input.

Functions ~

jqplay#jq_job()                                              *jqplay#jq_job()*
            Returns the jq job object as obtained by |job_start()|. Can be
            used to get the status of the job with |job_status()|, for
            example, for 'statusline' integration.

jqplay#ctx()                                                    *jqplay#ctx()*
            Returns a jqplay context |Dictionary| that is used internally
            during a jqplay session. Useful for debugging.

==============================================================================
CONFIGURATION                                                  *jqplay-config*

b:jqplay                                                            *b:jqplay*
g:jqplay                                                            *g:jqplay*

Options are set in the buffer-local |Dictionary| b:jqplay, or alternatively in
the global |Dictionary| g:jqplay. The following keys are supported:
                                                                  *jqplay-exe*
"exe" ~
            Path to jq executable.
            Default: value found in $PATH
                                                                 *jqplay-opts*
"opts" ~
            Default options that are always passed to jq, like "--tab". The
            arguments {args} passed to |jqplay-:Jqplay| are appended to
            "opts".
            Default: ""
                                                             *jqplay-autocmds*
"autocmds" ~
            List of |autocmd-events| used for the |jqplay-:Jqplay| command
            that specifies when to invoke jq. The autocommands are set for
            both the input json buffer and the jq scratch buffer. If you don't
            want to run jq interactively on every buffer change, set this
            entry to an empty list and run |jqplay-:Jqrun| on demand.
            Default: ["|InsertLeave|", "|TextChanged|"]

Note: The |buffer-variable| b:jqplay must be specified for json filetypes,
for example, in after/ftplugin/json.vim.

                                                      *jqplay-config-examples*
Examples ~

    1. Use the local jq executable and tabs for indentation. Invoke jq
       whenever insert mode is left, text is changed in normal mode, or when
       user doesn't press a key in insert mode for the time specified with
       |updatetime|: >

       " in vimrc
       let g:jqplay = {
               \ 'exe': '~/.local/bin/jq',
               \ 'opts': '--tab',
               \ 'autocmds': ['TextChanged', 'CursorHoldI', 'InsertLeave']
               \ }
<
    2. Use tabs for indentation, don't run jq automatically on buffer change.
       Instead invoke jq manually with |jqplay-:Jqrun|: >

       " in after/ftplugin/json.vim
       let b:jqplay = { 'opts': '--tab', 'autocmds': [] }

==============================================================================
FAQ                                                               *jqplay-faq*

How can I override buffer settings of jq-output:// buffers? ~

Option 1, use |autocommands|:
>
    " in your vimrc or somewhere in ~/.vim/plugin/
    augroup jq-output
        autocmd!
        autocmd FileType json
            \ if bufname('%')[:11] ==# 'jq-output://' |
            \   setlocal wincolor=NormalNC            |
            \ endif
    augroup END
<
Option 2, use a |ftplugin| file:
>
    " in after/ftplugin/json.vim
    if bufname('%')[:11] ==# 'jq-output://'
        setlocal wincolor=NormalNC
    endif
<
 vim:tw=78:et:ft=help:norl:
